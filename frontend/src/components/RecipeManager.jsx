import React, { useState, useEffect } from 'react';
import { Plus, Search, Filter, Clock, Users, Star, Edit, Trash2, Image } from 'lucide-react';
import { getAllRecipes, addRecipe, deleteRecipe } from '../api';

const RecipeManager = () => {
  const [recipes, setRecipes] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDifficulty, setSelectedDifficulty] = useState('All');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingRecipe, setEditingRecipe] = useState(null);
  const [loading, setLoading] = useState(false);

  const [newRecipe, setNewRecipe] = useState({
    title: '',
    description: '',
    ingredients: [''],
    instructions: [''],
    prepTime: 0,
    cookTime: 0,
    servings: 1,
    calories: 0,
    tags: [],
    difficulty: 'Easy',
    image: ''
  });

  useEffect(() => {
    setLoading(true);
    getAllRecipes()
      .then(setRecipes)
      .catch((err) => {
        console.error(err);
      })
      .finally(() => setLoading(false));
  }, []);

  const filteredRecipes = recipes.filter(recipe => {
    const matchesSearch = recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      recipe.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      recipe.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesDifficulty = selectedDifficulty === 'All' || recipe.difficulty === selectedDifficulty;
    return matchesSearch && matchesDifficulty;
  });

  const handleAddRecipe = async () => {
    if (newRecipe.title && newRecipe.description) {
      try {
        setLoading(true);
        const recipeToAdd = { ...newRecipe };
        delete recipeToAdd._id; // id will be generated by backend
        const savedRecipe = await addRecipe(recipeToAdd);
        setRecipes([...recipes, savedRecipe]);
        setShowAddModal(false);
        setNewRecipe({
          title: '',
          description: '',
          ingredients: [''],
          instructions: [''],
          prepTime: 0,
          cookTime: 0,
          servings: 1,
          calories: 0,
          tags: [],
          difficulty: 'Easy',
          image: ''
        });
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleEditRecipe = (recipe) => {
    setEditingRecipe(recipe);
    setNewRecipe(recipe);
    setShowAddModal(true);
  };

  const handleDeleteRecipe = async (id) => {
    try {
      setLoading(true);
      await deleteRecipe(id);
      setRecipes(recipes.filter(r => (r._id || r.id) !== id));
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const addIngredientField = () => {
    setNewRecipe({
      ...newRecipe,
      ingredients: [...(newRecipe.ingredients || []), '']
    });
  };

  const addInstructionField = () => {
    setNewRecipe({
      ...newRecipe,
      instructions: [...(newRecipe.instructions || []), '']
    });
  };

  const updateIngredient = (index, value) => {
    const ingredients = [...(newRecipe.ingredients || [])];
    ingredients[index] = value;
    setNewRecipe({ ...newRecipe, ingredients });
  };

  const updateInstruction = (index, value) => {
    const instructions = [...(newRecipe.instructions || [])];
    instructions[index] = value;
    setNewRecipe({ ...newRecipe, instructions });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cream via-peachy/20 to-sage/30 px-4 py-8">
      <div className="max-w-7xl mx-auto">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <div className="inline-block p-1 rounded-full bg-gradient-to-r from-peachy to-sage mb-6">
            <div className="bg-cream rounded-full px-8 py-4">
              <h1 className="text-5xl font-bold bg-gradient-to-r from-cinnamon to-charcoal bg-clip-text text-transparent">
                Recipe Collection
              </h1>
            </div>
          </div>
          <p className="text-xl text-charcoal/80 max-w-2xl mx-auto leading-relaxed">
            Organize and manage your personal recipe collection with style
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          <div className="bg-white/70 backdrop-blur-md rounded-2xl p-6 border border-peachy/30 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <div className="text-3xl font-bold text-cinnamon">{recipes.length}</div>
            <div className="text-charcoal/70">Total Recipes</div>
          </div>
          <div className="bg-white/70 backdrop-blur-md rounded-2xl p-6 border border-sage/30 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <div className="text-3xl font-bold text-sage">{filteredRecipes.length}</div>
            <div className="text-charcoal/70">Filtered Results</div>
          </div>
          <div className="bg-white/70 backdrop-blur-md rounded-2xl p-6 border border-biscuit/30 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <div className="text-3xl font-bold text-cinnamon">
              {Math.round(recipes.reduce((acc, r) => acc + (r.prepTime || 0) + (r.cookTime || 0), 0) / recipes.length || 0)}m
            </div>
            <div className="text-charcoal/70">Avg Cook Time</div>
          </div>
        </div>

        {/* Search and Filter Section */}
        <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-8 mb-12 border border-peachy/20">
          <div className="flex flex-col lg:flex-row gap-6">
            <div className="flex-1 relative">
              <Search className="absolute left-6 top-1/2 transform -translate-y-1/2 h-5 w-5 text-cinnamon" />
              <input
                type="text"
                placeholder="Search your recipes..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-14 pr-6 py-4 bg-cream/60 border border-peachy/30 rounded-full text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
              />
            </div>
            <div className="flex items-center gap-4">
              <Filter className="h-5 w-5 text-cinnamon" />
              <select
                value={selectedDifficulty}
                onChange={(e) => setSelectedDifficulty(e.target.value)}
                className="px-6 py-4 bg-cream/60 border border-peachy/30 rounded-full text-charcoal focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
              >
                <option value="All">All Difficulties</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
              </select>
            </div>
          </div>
        </div>

        {/* Loading State */}
        {loading && (
          <div className="text-center py-12">
            <div className="inline-flex items-center gap-3 bg-white/70 backdrop-blur-md rounded-full px-6 py-3 border border-peachy/30">
              <div className="w-5 h-5 border-2 border-cinnamon border-t-transparent rounded-full animate-spin"></div>
              <span className="text-charcoal font-medium">Loading recipes...</span>
            </div>
          </div>
        )}

        {/* Recipe Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredRecipes.map((recipe) => (
            <div key={recipe._id || recipe.id} className="group bg-white/80 backdrop-blur-lg rounded-3xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 border border-peachy/20 hover:border-cinnamon/40 hover:-translate-y-2">
              {/* Recipe Image */}
              <div className="relative h-52 overflow-hidden">
                {recipe.image ? (
                  <img
                    src={recipe.image}
                    alt={recipe.title}
                    className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-peachy/30 to-sage/30 flex items-center justify-center">
                    <Image className="h-16 w-16 text-cinnamon/40" />
                  </div>
                )}
                
                {/* Action Buttons */}
                <div className="absolute top-4 right-4 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <button
                    onClick={() => handleEditRecipe(recipe)}
                    className="p-3 bg-white/90 backdrop-blur-sm rounded-full shadow-lg hover:bg-sage hover:text-white transition-all"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDeleteRecipe(recipe._id || recipe.id)}
                    className="p-3 bg-white/90 backdrop-blur-sm rounded-full shadow-lg hover:bg-rosy hover:text-white transition-all"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>

                {/* Difficulty Badge */}
                <div className="absolute bottom-4 left-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    recipe.difficulty === 'Easy' ? 'bg-sage/20 text-sage border border-sage/30' :
                    recipe.difficulty === 'Medium' ? 'bg-biscuit/20 text-cinnamon border border-biscuit/30' :
                    'bg-rosy/20 text-rosy border border-rosy/30'
                  }`}>
                    {recipe.difficulty}
                  </span>
                </div>
              </div>

              {/* Recipe Content */}
              <div className="p-6">
                <h3 className="text-xl font-bold text-charcoal mb-3 group-hover:text-cinnamon transition-colors">
                  {recipe.title}
                </h3>
                <p className="text-charcoal/70 text-sm mb-4 line-clamp-2 leading-relaxed">
                  {recipe.description}
                </p>

                {/* Recipe Meta */}
                <div className="flex items-center justify-between text-sm text-charcoal/60 mb-4">
                  <div className="flex items-center gap-1">
                    <Clock className="h-4 w-4" />
                    <span>{(recipe.prepTime || 0) + (recipe.cookTime || 0)}m</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Users className="h-4 w-4" />
                    <span>{recipe.servings}</span>
                  </div>
                  {recipe.calories && (
                    <div className="font-medium text-cinnamon">
                      {recipe.calories} cal
                    </div>
                  )}
                </div>

                {/* Tags */}
                <div className="flex flex-wrap gap-2 mb-4">
                  {recipe.tags.slice(0, 2).map((tag, index) => (
                    <span
                      key={index}
                      className="px-3 py-1 bg-cream/60 text-charcoal/70 rounded-full text-xs font-medium border border-peachy/20"
                    >
                      {tag}
                    </span>
                  ))}
                </div>

                {/* Rating */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-1">
                    <Star className="h-4 w-4 text-biscuit fill-current" />
                    <span className="text-sm font-medium text-charcoal">
                      4.{Math.floor(Math.random() * 9) + 1}
                    </span>
                  </div>
                  <button className="text-sm font-medium text-cinnamon hover:text-sage transition-colors">
                    View Recipe →
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Floating Add Button */}
        <button
          onClick={() => setShowAddModal(true)}
          className="fixed bottom-8 right-8 bg-gradient-to-r from-cinnamon to-sage text-white p-6 rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 hover:scale-110 z-50"
        >
          <Plus className="h-8 w-8" />
        </button>
      </div>

      {/* Add/Edit Recipe Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-charcoal/20 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white/95 backdrop-blur-lg rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border border-peachy/30">
            {/* Modal Header */}
            <div className="sticky top-0 bg-white/90 backdrop-blur-md p-8 border-b border-peachy/20 rounded-t-3xl">
              <h3 className="text-2xl font-bold text-charcoal">
                {editingRecipe ? 'Edit Recipe' : 'Add New Recipe'}
              </h3>
            </div>

            <div className="p-8 space-y-6">
              {/* Basic Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Recipe Title *</label>
                  <input
                    type="text"
                    value={newRecipe.title || ''}
                    onChange={(e) => setNewRecipe({ ...newRecipe, title: e.target.value })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                    placeholder="Enter recipe title"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Image URL</label>
                  <input
                    type="url"
                    value={newRecipe.image || ''}
                    onChange={(e) => setNewRecipe({ ...newRecipe, image: e.target.value })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-charcoal mb-2">Description *</label>
                <textarea
                  value={newRecipe.description || ''}
                  onChange={(e) => setNewRecipe({ ...newRecipe, description: e.target.value })}
                  rows={3}
                  className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all resize-none"
                  placeholder="Describe your recipe"
                />
              </div>

              {/* Recipe Details */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Prep Time (min)</label>
                  <input
                    type="number"
                    value={newRecipe.prepTime || 0}
                    onChange={(e) => setNewRecipe({ ...newRecipe, prepTime: parseInt(e.target.value) })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Cook Time (min)</label>
                  <input
                    type="number"
                    value={newRecipe.cookTime || 0}
                    onChange={(e) => setNewRecipe({ ...newRecipe, cookTime: parseInt(e.target.value) })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Servings</label>
                  <input
                    type="number"
                    value={newRecipe.servings || 1}
                    onChange={(e) => setNewRecipe({ ...newRecipe, servings: parseInt(e.target.value) })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-charcoal mb-2">Difficulty</label>
                  <select
                    value={newRecipe.difficulty || 'Easy'}
                    onChange={(e) => setNewRecipe({ ...newRecipe, difficulty: e.target.value })}
                    className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                  >
                    <option value="Easy">Easy</option>
                    <option value="Medium">Medium</option>
                    <option value="Hard">Hard</option>
                  </select>
                </div>
              </div>

              {/* Ingredients */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-sm font-medium text-charcoal">Ingredients</label>
                  <button
                    type="button"
                    onClick={addIngredientField}
                    className="text-sm font-medium text-cinnamon hover:text-sage transition-colors"
                  >
                    + Add Ingredient
                  </button>
                </div>
                <div className="space-y-3">
                  {newRecipe.ingredients?.map((ingredient, index) => (
                    <input
                      key={index}
                      type="text"
                      value={ingredient}
                      onChange={(e) => updateIngredient(index, e.target.value)}
                      placeholder={`Ingredient ${index + 1}`}
                      className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all"
                    />
                  ))}
                </div>
              </div>

              {/* Instructions */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-sm font-medium text-charcoal">Instructions</label>
                  <button
                    type="button"
                    onClick={addInstructionField}
                    className="text-sm font-medium text-cinnamon hover:text-sage transition-colors"
                  >
                    + Add Step
                  </button>
                </div>
                <div className="space-y-3">
                  {newRecipe.instructions?.map((instruction, index) => (
                    <textarea
                      key={index}
                      value={instruction}
                      onChange={(e) => updateInstruction(index, e.target.value)}
                      placeholder={`Step ${index + 1}`}
                      rows={2}
                      className="w-full px-4 py-3 bg-cream/60 border border-peachy/30 rounded-xl text-charcoal placeholder-charcoal/60 focus:outline-none focus:ring-2 focus:ring-cinnamon/50 focus:border-cinnamon transition-all resize-none"
                    />
                  ))}
                </div>
              </div>
            </div>

            {/* Modal Footer */}
            <div className="sticky bottom-0 bg-white/90 backdrop-blur-md p-8 border-t border-peachy/20 rounded-b-3xl flex justify-end gap-4">
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setEditingRecipe(null);
                  setNewRecipe({
                    title: '',
                    description: '',
                    ingredients: [''],
                    instructions: [''],
                    prepTime: 0,
                    cookTime: 0,
                    servings: 1,
                    calories: 0,
                    tags: [],
                    difficulty: 'Easy',
                    image: ''
                  });
                }}
                className="px-6 py-3 text-charcoal hover:text-charcoal/70 font-medium transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleAddRecipe}
                className="px-8 py-3 bg-gradient-to-r from-cinnamon to-sage text-white rounded-xl font-medium hover:shadow-lg transition-all"
              >
                {editingRecipe ? 'Update Recipe' : 'Save Recipe'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RecipeManager;